// Package n8nclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package n8nclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ExecutionMode.
const (
	ExecutionModeCli        ExecutionMode = "cli"
	ExecutionModeError      ExecutionMode = "error"
	ExecutionModeIntegrated ExecutionMode = "integrated"
	ExecutionModeInternal   ExecutionMode = "internal"
	ExecutionModeManual     ExecutionMode = "manual"
	ExecutionModeRetry      ExecutionMode = "retry"
	ExecutionModeTrigger    ExecutionMode = "trigger"
	ExecutionModeWebhook    ExecutionMode = "webhook"
)

// Defines values for WorkflowSettingsSaveDataErrorExecution.
const (
	WorkflowSettingsSaveDataErrorExecutionAll  WorkflowSettingsSaveDataErrorExecution = "all"
	WorkflowSettingsSaveDataErrorExecutionNone WorkflowSettingsSaveDataErrorExecution = "none"
)

// Defines values for WorkflowSettingsSaveDataSuccessExecution.
const (
	WorkflowSettingsSaveDataSuccessExecutionAll  WorkflowSettingsSaveDataSuccessExecution = "all"
	WorkflowSettingsSaveDataSuccessExecutionNone WorkflowSettingsSaveDataSuccessExecution = "none"
)

// Defines values for PostAuditJSONBodyAdditionalOptionsCategories.
const (
	Credentials PostAuditJSONBodyAdditionalOptionsCategories = "credentials"
	Database    PostAuditJSONBodyAdditionalOptionsCategories = "database"
	Filesystem  PostAuditJSONBodyAdditionalOptionsCategories = "filesystem"
	Instance    PostAuditJSONBodyAdditionalOptionsCategories = "instance"
	Nodes       PostAuditJSONBodyAdditionalOptionsCategories = "nodes"
)

// Defines values for GetExecutionsParamsStatus.
const (
	GetExecutionsParamsStatusError   GetExecutionsParamsStatus = "error"
	GetExecutionsParamsStatusSuccess GetExecutionsParamsStatus = "success"
	GetExecutionsParamsStatusWaiting GetExecutionsParamsStatus = "waiting"
)

// Audit defines model for Audit.
type Audit struct {
	CredentialsRiskReport *map[string]interface{} `json:"Credentials Risk Report,omitempty"`
	DatabaseRiskReport    *map[string]interface{} `json:"Database Risk Report,omitempty"`
	FilesystemRiskReport  *map[string]interface{} `json:"Filesystem Risk Report,omitempty"`
	InstanceRiskReport    *map[string]interface{} `json:"Instance Risk Report,omitempty"`
	NodesRiskReport       *map[string]interface{} `json:"Nodes Risk Report,omitempty"`
}

// Credential defines model for Credential.
type Credential struct {
	CreatedAt *time.Time              `json:"createdAt,omitempty"`
	Data      *map[string]interface{} `json:"data,omitempty"`
	Id        *float32                `json:"id,omitempty"`
	Name      string                  `json:"name"`
	Type      string                  `json:"type"`
	UpdatedAt *time.Time              `json:"updatedAt,omitempty"`
}

// Execution defines model for Execution.
type Execution struct {
	Data           *map[string]interface{} `json:"data,omitempty"`
	Finished       *bool                   `json:"finished,omitempty"`
	Id             *float32                `json:"id,omitempty"`
	Mode           *ExecutionMode          `json:"mode,omitempty"`
	RetryOf        *float32                `json:"retryOf"`
	RetrySuccessId *float32                `json:"retrySuccessId"`
	StartedAt      *time.Time              `json:"startedAt,omitempty"`
	StoppedAt      *time.Time              `json:"stoppedAt,omitempty"`
	WaitTill       *time.Time              `json:"waitTill"`
	WorkflowId     *float32                `json:"workflowId,omitempty"`
}

// ExecutionMode defines model for Execution.Mode.
type ExecutionMode string

// ExecutionList defines model for ExecutionList.
type ExecutionList struct {
	Data *[]Execution `json:"data,omitempty"`

	// NextCursor Paginate through executions by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
	NextCursor *string `json:"nextCursor"`
}

// Node defines model for Node.
type Node struct {
	AlwaysOutputData *bool                   `json:"alwaysOutputData,omitempty"`
	ContinueOnFail   *bool                   `json:"continueOnFail,omitempty"`
	CreatedAt        *time.Time              `json:"createdAt,omitempty"`
	Credentials      *map[string]interface{} `json:"credentials,omitempty"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	ExecuteOnce      *bool                   `json:"executeOnce,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	MaxTries         *float32                `json:"maxTries,omitempty"`
	Name             *string                 `json:"name,omitempty"`
	Notes            *string                 `json:"notes,omitempty"`
	NotesInFlow      *bool                   `json:"notesInFlow,omitempty"`
	Parameters       *map[string]interface{} `json:"parameters,omitempty"`
	Position         *[]float32              `json:"position,omitempty"`
	RetryOnFail      *bool                   `json:"retryOnFail,omitempty"`
	Type             *string                 `json:"type,omitempty"`
	TypeVersion      *float32                `json:"typeVersion,omitempty"`
	UpdatedAt        *time.Time              `json:"updatedAt,omitempty"`
	WaitBetweenTries *float32                `json:"waitBetweenTries,omitempty"`
	WebhookId        *string                 `json:"webhookId,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *float32   `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Workflow defines model for Workflow.
type Workflow struct {
	Active      *bool                  `json:"active,omitempty"`
	Connections map[string]interface{} `json:"connections"`
	CreatedAt   *time.Time             `json:"createdAt,omitempty"`
	Id          *float32               `json:"id,omitempty"`
	Name        string                 `json:"name"`
	Nodes       []Node                 `json:"nodes"`
	Settings    WorkflowSettings       `json:"settings"`
	StaticData  *Workflow_StaticData   `json:"staticData"`
	Tags        *[]Tag                 `json:"tags,omitempty"`
	UpdatedAt   *time.Time             `json:"updatedAt,omitempty"`
}

// WorkflowStaticData0 defines model for .
type WorkflowStaticData0 = string

// WorkflowStaticData1 defines model for .
type WorkflowStaticData1 = map[string]interface{}

// Workflow_StaticData defines model for Workflow.StaticData.
type Workflow_StaticData struct {
	union json.RawMessage
}

// WorkflowList defines model for WorkflowList.
type WorkflowList struct {
	Data *[]Workflow `json:"data,omitempty"`

	// NextCursor Paginate through workflows by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
	NextCursor *string `json:"nextCursor"`
}

// WorkflowSettings defines model for WorkflowSettings.
type WorkflowSettings struct {
	// ErrorWorkflow The ID of the workflow that contains the error trigger node.
	ErrorWorkflow            *float32                                  `json:"errorWorkflow,omitempty"`
	ExecutionTimeout         *float32                                  `json:"executionTimeout,omitempty"`
	SaveDataErrorExecution   *WorkflowSettingsSaveDataErrorExecution   `json:"saveDataErrorExecution,omitempty"`
	SaveDataSuccessExecution *WorkflowSettingsSaveDataSuccessExecution `json:"saveDataSuccessExecution,omitempty"`
	SaveExecutionProgress    *bool                                     `json:"saveExecutionProgress,omitempty"`
	SaveManualExecutions     *bool                                     `json:"saveManualExecutions,omitempty"`
	Timezone                 *string                                   `json:"timezone,omitempty"`
}

// WorkflowSettingsSaveDataErrorExecution defines model for WorkflowSettings.SaveDataErrorExecution.
type WorkflowSettingsSaveDataErrorExecution string

// WorkflowSettingsSaveDataSuccessExecution defines model for WorkflowSettings.SaveDataSuccessExecution.
type WorkflowSettingsSaveDataSuccessExecution string

// Cursor defines model for Cursor.
type Cursor = string

// ExecutionId defines model for ExecutionId.
type ExecutionId = float32

// IncludeData defines model for IncludeData.
type IncludeData = bool

// Limit defines model for Limit.
type Limit = float32

// WorkflowId defines model for WorkflowId.
type WorkflowId = float32

// PostAuditJSONBody defines parameters for PostAudit.
type PostAuditJSONBody struct {
	AdditionalOptions *struct {
		Categories *[]PostAuditJSONBodyAdditionalOptionsCategories `json:"categories,omitempty"`

		// DaysAbandonedWorkflow Days for a workflow to be considered abandoned if not executed
		DaysAbandonedWorkflow *int `json:"daysAbandonedWorkflow,omitempty"`
	} `json:"additionalOptions,omitempty"`
}

// PostAuditJSONBodyAdditionalOptionsCategories defines parameters for PostAudit.
type PostAuditJSONBodyAdditionalOptionsCategories string

// GetExecutionsParams defines parameters for GetExecutions.
type GetExecutionsParams struct {
	// IncludeData Whether or not to include the execution's detailed data.
	IncludeData *IncludeData `form:"includeData,omitempty" json:"includeData,omitempty"`

	// Status Status to filter the executions by.
	Status *GetExecutionsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// WorkflowId Workflow to filter the executions by.
	WorkflowId *string `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// Limit The maximum number of items to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Paginate through users by setting the cursor parameter to a nextCursor attribute returned by a previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetExecutionsParamsStatus defines parameters for GetExecutions.
type GetExecutionsParamsStatus string

// GetExecutionsIdParams defines parameters for GetExecutionsId.
type GetExecutionsIdParams struct {
	// IncludeData Whether or not to include the execution's detailed data.
	IncludeData *IncludeData `form:"includeData,omitempty" json:"includeData,omitempty"`
}

// GetWorkflowsParams defines parameters for GetWorkflows.
type GetWorkflowsParams struct {
	Active *bool   `form:"active,omitempty" json:"active,omitempty"`
	Tags   *string `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit The maximum number of items to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Paginate through users by setting the cursor parameter to a nextCursor attribute returned by a previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PostAuditJSONRequestBody defines body for PostAudit for application/json ContentType.
type PostAuditJSONRequestBody PostAuditJSONBody

// PostCredentialsJSONRequestBody defines body for PostCredentials for application/json ContentType.
type PostCredentialsJSONRequestBody = Credential

// PostWorkflowsJSONRequestBody defines body for PostWorkflows for application/json ContentType.
type PostWorkflowsJSONRequestBody = Workflow

// PutWorkflowsIdJSONRequestBody defines body for PutWorkflowsId for application/json ContentType.
type PutWorkflowsIdJSONRequestBody = Workflow

// AsWorkflowStaticData0 returns the union data inside the Workflow_StaticData as a WorkflowStaticData0
func (t Workflow_StaticData) AsWorkflowStaticData0() (WorkflowStaticData0, error) {
	var body WorkflowStaticData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWorkflowStaticData0 overwrites any union data inside the Workflow_StaticData as the provided WorkflowStaticData0
func (t *Workflow_StaticData) FromWorkflowStaticData0(v WorkflowStaticData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWorkflowStaticData0 performs a merge with any union data inside the Workflow_StaticData, using the provided WorkflowStaticData0
func (t *Workflow_StaticData) MergeWorkflowStaticData0(v WorkflowStaticData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWorkflowStaticData1 returns the union data inside the Workflow_StaticData as a WorkflowStaticData1
func (t Workflow_StaticData) AsWorkflowStaticData1() (WorkflowStaticData1, error) {
	var body WorkflowStaticData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWorkflowStaticData1 overwrites any union data inside the Workflow_StaticData as the provided WorkflowStaticData1
func (t *Workflow_StaticData) FromWorkflowStaticData1(v WorkflowStaticData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWorkflowStaticData1 performs a merge with any union data inside the Workflow_StaticData, using the provided WorkflowStaticData1
func (t *Workflow_StaticData) MergeWorkflowStaticData1(v WorkflowStaticData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Workflow_StaticData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Workflow_StaticData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAudit request with any body
	PostAuditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAudit(ctx context.Context, body PostAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCredentials request with any body
	PostCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCredentials(ctx context.Context, body PostCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCredentialsSchemaCredentialTypeName request
	GetCredentialsSchemaCredentialTypeName(ctx context.Context, credentialTypeName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCredential request
	DeleteCredential(ctx context.Context, id float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExecutions request
	GetExecutions(ctx context.Context, params *GetExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExecutionsId request
	DeleteExecutionsId(ctx context.Context, id ExecutionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExecutionsId request
	GetExecutionsId(ctx context.Context, id ExecutionId, params *GetExecutionsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflows request
	GetWorkflows(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflows request with any body
	PostWorkflowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkflows(ctx context.Context, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkflowsId request
	DeleteWorkflowsId(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkflowsId request
	GetWorkflowsId(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkflowsId request with any body
	PutWorkflowsIdWithBody(ctx context.Context, id WorkflowId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWorkflowsId(ctx context.Context, id WorkflowId, body PutWorkflowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsIdActivate request
	PostWorkflowsIdActivate(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkflowsIdDeactivate request
	PostWorkflowsIdDeactivate(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAudit(ctx context.Context, body PostAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuditRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCredentials(ctx context.Context, body PostCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCredentialsSchemaCredentialTypeName(ctx context.Context, credentialTypeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCredentialsSchemaCredentialTypeNameRequest(c.Server, credentialTypeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCredential(ctx context.Context, id float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCredentialRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExecutions(ctx context.Context, params *GetExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExecutionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExecutionsId(ctx context.Context, id ExecutionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExecutionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExecutionsId(ctx context.Context, id ExecutionId, params *GetExecutionsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExecutionsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflows(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflows(ctx context.Context, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkflowsId(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkflowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkflowsId(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkflowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkflowsIdWithBody(ctx context.Context, id WorkflowId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkflowsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkflowsId(ctx context.Context, id WorkflowId, body PutWorkflowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkflowsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsIdActivate(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsIdActivateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkflowsIdDeactivate(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkflowsIdDeactivateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuditRequest calls the generic PostAudit builder with application/json body
func NewPostAuditRequest(server string, body PostAuditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuditRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuditRequestWithBody generates requests for PostAudit with any type of body
func NewPostAuditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCredentialsRequest calls the generic PostCredentials builder with application/json body
func NewPostCredentialsRequest(server string, body PostCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCredentialsRequestWithBody generates requests for PostCredentials with any type of body
func NewPostCredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCredentialsSchemaCredentialTypeNameRequest generates requests for GetCredentialsSchemaCredentialTypeName
func NewGetCredentialsSchemaCredentialTypeNameRequest(server string, credentialTypeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "credentialTypeName", runtime.ParamLocationPath, credentialTypeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCredentialRequest generates requests for DeleteCredential
func NewDeleteCredentialRequest(server string, id float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExecutionsRequest generates requests for GetExecutions
func NewGetExecutionsRequest(server string, params *GetExecutionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/executions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeData != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeData", runtime.ParamLocationQuery, *params.IncludeData); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WorkflowId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workflowId", runtime.ParamLocationQuery, *params.WorkflowId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteExecutionsIdRequest generates requests for DeleteExecutionsId
func NewDeleteExecutionsIdRequest(server string, id ExecutionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/executions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExecutionsIdRequest generates requests for GetExecutionsId
func NewGetExecutionsIdRequest(server string, id ExecutionId, params *GetExecutionsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/executions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeData != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeData", runtime.ParamLocationQuery, *params.IncludeData); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowsRequest generates requests for GetWorkflows
func NewGetWorkflowsRequest(server string, params *GetWorkflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Active != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkflowsRequest calls the generic PostWorkflows builder with application/json body
func NewPostWorkflowsRequest(server string, body PostWorkflowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkflowsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWorkflowsRequestWithBody generates requests for PostWorkflows with any type of body
func NewPostWorkflowsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkflowsIdRequest generates requests for DeleteWorkflowsId
func NewDeleteWorkflowsIdRequest(server string, id WorkflowId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkflowsIdRequest generates requests for GetWorkflowsId
func NewGetWorkflowsIdRequest(server string, id WorkflowId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWorkflowsIdRequest calls the generic PutWorkflowsId builder with application/json body
func NewPutWorkflowsIdRequest(server string, id WorkflowId, body PutWorkflowsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWorkflowsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutWorkflowsIdRequestWithBody generates requests for PutWorkflowsId with any type of body
func NewPutWorkflowsIdRequestWithBody(server string, id WorkflowId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostWorkflowsIdActivateRequest generates requests for PostWorkflowsIdActivate
func NewPostWorkflowsIdActivateRequest(server string, id WorkflowId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/%s/activate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkflowsIdDeactivateRequest generates requests for PostWorkflowsIdDeactivate
func NewPostWorkflowsIdDeactivateRequest(server string, id WorkflowId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows/%s/deactivate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAudit request with any body
	PostAuditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuditResponse, error)

	PostAuditWithResponse(ctx context.Context, body PostAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuditResponse, error)

	// PostCredentials request with any body
	PostCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCredentialsResponse, error)

	PostCredentialsWithResponse(ctx context.Context, body PostCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCredentialsResponse, error)

	// GetCredentialsSchemaCredentialTypeName request
	GetCredentialsSchemaCredentialTypeNameWithResponse(ctx context.Context, credentialTypeName string, reqEditors ...RequestEditorFn) (*GetCredentialsSchemaCredentialTypeNameResponse, error)

	// DeleteCredential request
	DeleteCredentialWithResponse(ctx context.Context, id float32, reqEditors ...RequestEditorFn) (*DeleteCredentialResponse, error)

	// GetExecutions request
	GetExecutionsWithResponse(ctx context.Context, params *GetExecutionsParams, reqEditors ...RequestEditorFn) (*GetExecutionsResponse, error)

	// DeleteExecutionsId request
	DeleteExecutionsIdWithResponse(ctx context.Context, id ExecutionId, reqEditors ...RequestEditorFn) (*DeleteExecutionsIdResponse, error)

	// GetExecutionsId request
	GetExecutionsIdWithResponse(ctx context.Context, id ExecutionId, params *GetExecutionsIdParams, reqEditors ...RequestEditorFn) (*GetExecutionsIdResponse, error)

	// GetWorkflows request
	GetWorkflowsWithResponse(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*GetWorkflowsResponse, error)

	// PostWorkflows request with any body
	PostWorkflowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error)

	PostWorkflowsWithResponse(ctx context.Context, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error)

	// DeleteWorkflowsId request
	DeleteWorkflowsIdWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*DeleteWorkflowsIdResponse, error)

	// GetWorkflowsId request
	GetWorkflowsIdWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*GetWorkflowsIdResponse, error)

	// PutWorkflowsId request with any body
	PutWorkflowsIdWithBodyWithResponse(ctx context.Context, id WorkflowId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkflowsIdResponse, error)

	PutWorkflowsIdWithResponse(ctx context.Context, id WorkflowId, body PutWorkflowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkflowsIdResponse, error)

	// PostWorkflowsIdActivate request
	PostWorkflowsIdActivateWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*PostWorkflowsIdActivateResponse, error)

	// PostWorkflowsIdDeactivate request
	PostWorkflowsIdDeactivateWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*PostWorkflowsIdDeactivateResponse, error)
}

type PostAuditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Audit
}

// Status returns HTTPResponse.Status
func (r PostAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r PostCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCredentialsSchemaCredentialTypeNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCredentialsSchemaCredentialTypeNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCredentialsSchemaCredentialTypeNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r DeleteCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExecutionList
}

// Status returns HTTPResponse.Status
func (r GetExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExecutionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Execution
}

// Status returns HTTPResponse.Status
func (r DeleteExecutionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExecutionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExecutionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Execution
}

// Status returns HTTPResponse.Status
func (r GetExecutionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExecutionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowList
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkflowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r DeleteWorkflowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkflowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkflowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r GetWorkflowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkflowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkflowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r PutWorkflowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkflowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsIdActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsIdActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsIdActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkflowsIdDeactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workflow
}

// Status returns HTTPResponse.Status
func (r PostWorkflowsIdDeactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkflowsIdDeactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuditWithBodyWithResponse request with arbitrary body returning *PostAuditResponse
func (c *ClientWithResponses) PostAuditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuditResponse, error) {
	rsp, err := c.PostAuditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuditResponse(rsp)
}

func (c *ClientWithResponses) PostAuditWithResponse(ctx context.Context, body PostAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuditResponse, error) {
	rsp, err := c.PostAudit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuditResponse(rsp)
}

// PostCredentialsWithBodyWithResponse request with arbitrary body returning *PostCredentialsResponse
func (c *ClientWithResponses) PostCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCredentialsResponse, error) {
	rsp, err := c.PostCredentialsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCredentialsResponse(rsp)
}

func (c *ClientWithResponses) PostCredentialsWithResponse(ctx context.Context, body PostCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCredentialsResponse, error) {
	rsp, err := c.PostCredentials(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCredentialsResponse(rsp)
}

// GetCredentialsSchemaCredentialTypeNameWithResponse request returning *GetCredentialsSchemaCredentialTypeNameResponse
func (c *ClientWithResponses) GetCredentialsSchemaCredentialTypeNameWithResponse(ctx context.Context, credentialTypeName string, reqEditors ...RequestEditorFn) (*GetCredentialsSchemaCredentialTypeNameResponse, error) {
	rsp, err := c.GetCredentialsSchemaCredentialTypeName(ctx, credentialTypeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCredentialsSchemaCredentialTypeNameResponse(rsp)
}

// DeleteCredentialWithResponse request returning *DeleteCredentialResponse
func (c *ClientWithResponses) DeleteCredentialWithResponse(ctx context.Context, id float32, reqEditors ...RequestEditorFn) (*DeleteCredentialResponse, error) {
	rsp, err := c.DeleteCredential(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCredentialResponse(rsp)
}

// GetExecutionsWithResponse request returning *GetExecutionsResponse
func (c *ClientWithResponses) GetExecutionsWithResponse(ctx context.Context, params *GetExecutionsParams, reqEditors ...RequestEditorFn) (*GetExecutionsResponse, error) {
	rsp, err := c.GetExecutions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExecutionsResponse(rsp)
}

// DeleteExecutionsIdWithResponse request returning *DeleteExecutionsIdResponse
func (c *ClientWithResponses) DeleteExecutionsIdWithResponse(ctx context.Context, id ExecutionId, reqEditors ...RequestEditorFn) (*DeleteExecutionsIdResponse, error) {
	rsp, err := c.DeleteExecutionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExecutionsIdResponse(rsp)
}

// GetExecutionsIdWithResponse request returning *GetExecutionsIdResponse
func (c *ClientWithResponses) GetExecutionsIdWithResponse(ctx context.Context, id ExecutionId, params *GetExecutionsIdParams, reqEditors ...RequestEditorFn) (*GetExecutionsIdResponse, error) {
	rsp, err := c.GetExecutionsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExecutionsIdResponse(rsp)
}

// GetWorkflowsWithResponse request returning *GetWorkflowsResponse
func (c *ClientWithResponses) GetWorkflowsWithResponse(ctx context.Context, params *GetWorkflowsParams, reqEditors ...RequestEditorFn) (*GetWorkflowsResponse, error) {
	rsp, err := c.GetWorkflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsResponse(rsp)
}

// PostWorkflowsWithBodyWithResponse request with arbitrary body returning *PostWorkflowsResponse
func (c *ClientWithResponses) PostWorkflowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error) {
	rsp, err := c.PostWorkflowsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsResponse(rsp)
}

func (c *ClientWithResponses) PostWorkflowsWithResponse(ctx context.Context, body PostWorkflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkflowsResponse, error) {
	rsp, err := c.PostWorkflows(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsResponse(rsp)
}

// DeleteWorkflowsIdWithResponse request returning *DeleteWorkflowsIdResponse
func (c *ClientWithResponses) DeleteWorkflowsIdWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*DeleteWorkflowsIdResponse, error) {
	rsp, err := c.DeleteWorkflowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkflowsIdResponse(rsp)
}

// GetWorkflowsIdWithResponse request returning *GetWorkflowsIdResponse
func (c *ClientWithResponses) GetWorkflowsIdWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*GetWorkflowsIdResponse, error) {
	rsp, err := c.GetWorkflowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkflowsIdResponse(rsp)
}

// PutWorkflowsIdWithBodyWithResponse request with arbitrary body returning *PutWorkflowsIdResponse
func (c *ClientWithResponses) PutWorkflowsIdWithBodyWithResponse(ctx context.Context, id WorkflowId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkflowsIdResponse, error) {
	rsp, err := c.PutWorkflowsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkflowsIdResponse(rsp)
}

func (c *ClientWithResponses) PutWorkflowsIdWithResponse(ctx context.Context, id WorkflowId, body PutWorkflowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkflowsIdResponse, error) {
	rsp, err := c.PutWorkflowsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkflowsIdResponse(rsp)
}

// PostWorkflowsIdActivateWithResponse request returning *PostWorkflowsIdActivateResponse
func (c *ClientWithResponses) PostWorkflowsIdActivateWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*PostWorkflowsIdActivateResponse, error) {
	rsp, err := c.PostWorkflowsIdActivate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsIdActivateResponse(rsp)
}

// PostWorkflowsIdDeactivateWithResponse request returning *PostWorkflowsIdDeactivateResponse
func (c *ClientWithResponses) PostWorkflowsIdDeactivateWithResponse(ctx context.Context, id WorkflowId, reqEditors ...RequestEditorFn) (*PostWorkflowsIdDeactivateResponse, error) {
	rsp, err := c.PostWorkflowsIdDeactivate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkflowsIdDeactivateResponse(rsp)
}

// ParsePostAuditResponse parses an HTTP response from a PostAuditWithResponse call
func ParsePostAuditResponse(rsp *http.Response) (*PostAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCredentialsResponse parses an HTTP response from a PostCredentialsWithResponse call
func ParsePostCredentialsResponse(rsp *http.Response) (*PostCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCredentialsSchemaCredentialTypeNameResponse parses an HTTP response from a GetCredentialsSchemaCredentialTypeNameWithResponse call
func ParseGetCredentialsSchemaCredentialTypeNameResponse(rsp *http.Response) (*GetCredentialsSchemaCredentialTypeNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCredentialsSchemaCredentialTypeNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCredentialResponse parses an HTTP response from a DeleteCredentialWithResponse call
func ParseDeleteCredentialResponse(rsp *http.Response) (*DeleteCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExecutionsResponse parses an HTTP response from a GetExecutionsWithResponse call
func ParseGetExecutionsResponse(rsp *http.Response) (*GetExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExecutionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteExecutionsIdResponse parses an HTTP response from a DeleteExecutionsIdWithResponse call
func ParseDeleteExecutionsIdResponse(rsp *http.Response) (*DeleteExecutionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExecutionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Execution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExecutionsIdResponse parses an HTTP response from a GetExecutionsIdWithResponse call
func ParseGetExecutionsIdResponse(rsp *http.Response) (*GetExecutionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExecutionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Execution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsResponse parses an HTTP response from a GetWorkflowsWithResponse call
func ParseGetWorkflowsResponse(rsp *http.Response) (*GetWorkflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsResponse parses an HTTP response from a PostWorkflowsWithResponse call
func ParsePostWorkflowsResponse(rsp *http.Response) (*PostWorkflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWorkflowsIdResponse parses an HTTP response from a DeleteWorkflowsIdWithResponse call
func ParseDeleteWorkflowsIdResponse(rsp *http.Response) (*DeleteWorkflowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkflowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkflowsIdResponse parses an HTTP response from a GetWorkflowsIdWithResponse call
func ParseGetWorkflowsIdResponse(rsp *http.Response) (*GetWorkflowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkflowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutWorkflowsIdResponse parses an HTTP response from a PutWorkflowsIdWithResponse call
func ParsePutWorkflowsIdResponse(rsp *http.Response) (*PutWorkflowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkflowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsIdActivateResponse parses an HTTP response from a PostWorkflowsIdActivateWithResponse call
func ParsePostWorkflowsIdActivateResponse(rsp *http.Response) (*PostWorkflowsIdActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsIdActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWorkflowsIdDeactivateResponse parses an HTTP response from a PostWorkflowsIdDeactivateWithResponse call
func ParsePostWorkflowsIdDeactivateResponse(rsp *http.Response) (*PostWorkflowsIdDeactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkflowsIdDeactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
